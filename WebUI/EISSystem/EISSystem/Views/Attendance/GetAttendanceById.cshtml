@model IEnumerable<EIS.Entities.Employee.Attendance>
@{
    int absentDays = 0;
    int totalDays = 0;
    int year = 0;
    int month = 0;
    string displayTimeIn = "";
    string displayTimeOut = "-";
    string hours = "-";
    DateTime startDate = new DateTime();


    if (ViewBag.year != null)
    {
        year = ViewBag.year;
    }

    if (ViewBag.startDate != null)
    {
        startDate = ViewBag.startDate;
    }
    if (ViewBag.month != null)
    {
        month = ViewBag.month;
    }
    DateTime targetDate = new DateTime();
    DateTime endDate = new DateTime();

    if (ViewBag.type == "year")
    {

        targetDate = new DateTime(year, 1, 1);
        endDate = targetDate.AddYears(1);
        if (DateTime.IsLeapYear(year))
        { totalDays = 366; }
        else
        { totalDays = 365; }

    }
    else if (ViewBag.type == "month")
    {
        targetDate = new DateTime(year, month, 1);
        endDate = targetDate.AddMonths(1);
        totalDays = DateTime.DaysInMonth(year, month);

    }
    else if (ViewBag.type == "week")
    {
        targetDate = startDate;
        endDate = targetDate.AddDays(7);
        totalDays = 7;
    }

    if (Model.Count() == 0)
    {
        displayTimeIn = "0";
        displayTimeOut = "0";
        hours = "0";
        absentDays = 0;
    }
    else
    {
        absentDays = totalDays - Model.Count();
        TimeSpan averageTimeIn = new TimeSpan(Convert.ToInt64(Model.Average(x => x.TimeIn.Ticks)));
        DateTime timeIn = DateTime.Today.Add(averageTimeIn);
        displayTimeIn = timeIn.ToString("hh:mm tt");

        TimeSpan averageTimeOut = new TimeSpan(Convert.ToInt64(Model.Average(x => x.TimeOut.Ticks)));
        DateTime timeOut = DateTime.Today.Add(averageTimeOut);
        displayTimeOut = timeOut.ToString("hh:mm tt");

        DateTime averageHours = DateTime.Today.Add(averageTimeOut - averageTimeIn);
        string displayAverageHours = timeOut.ToString("hh:mm");

        var hour1 = Math.Round(timeOut.Subtract(timeIn).TotalHours, 2);
          hours=(hour1*0.6).ToString();
    }


}

<style type="text/css">

    td {
        width: 200px;
        text-align: center
    }

    th {
        font-size: medium;
        text-align: center
    }

    div .panel-primary {
        text-align: center
    }
</style>


<div class="container-fluid">
    <div class="row">
        <div class="col-md-2 col-sm-2">
            <div class="panel panel-primary">
                <div class="panel-heading">Average Hrs</div>
                <div class="panel-body">@hours<span>Hrs</span></div>
            </div>
        </div>
        <div class="col-md-2 col-sm-2">
            <div class="panel panel-primary">
                <div class="panel-heading">Average TImeIn</div>
                <div class="panel-body">@displayTimeIn</div>
            </div>
        </div>
        <div class="col-md-2 col-sm-2">
            <div class="panel panel-primary">
                <div class="panel-heading">Average TImeOut</div>
                <div class="panel-body">@displayTimeOut</div>
            </div>
        </div>
        <div class="col-md-2 col-sm-2">
            <div class="panel panel-primary">
                <div class="panel-heading">Present Days</div>
                <div class="panel-body">@Model.Count()</div>
            </div>
        </div>
        <div class="col-md-2 col-sm-2">
            <div class="panel panel-primary">
                <div class="panel-heading">Absent Days</div>
                <div class="panel-body">@absentDays</div>
            </div>
        </div>
        <div class="col-md-2 col-sm-2">
            <div class="panel panel-primary">
                <div class="panel-heading">Total Days</div>
                <div class="panel-body">@totalDays</div>
            </div>
        </div>
    </div>
</div>
<div class="table-responsive">
    <table id="example" class="table table-responsive table-striped table-hover">
        <thead>
            <tr>
                <th>Date</th>
                <th>Time In</th>
                <th>Time Out</th>
                <th>Status</th>

            </tr>
        </thead>
        <tbody>
            @{
                @for (DateTime date = targetDate; date < endDate; date = date.AddDays(1))
                {
                    <tr>
                        <td>
                            @date.ToShortDateString()
                        </td>

                        @{
                            var attendance = Model.Where(x => x.DateIn == date).Select(x => new { x.TimeIn, x.TimeOut }).FirstOrDefault();
                        }

                        @if (attendance == null || attendance.TimeIn == attendance.TimeOut)
                        {

                            @if (date < DateTime.Now.Date)
                            {
                                <td><text>Nil</text></td>
                                <td><text>Nil</text></td>
                                <td><text style="background-color:red; color:white; padding:5px">Absent</text></td>
                            }
                            else
                            {
                                <td><text>-</text></td>
                                <td><text>-</text></td>
                                <td><text>-</text></td>
                            }

                        }

                        else
                        {

                            <td> @attendance.TimeIn.Hours:@attendance.TimeIn.Minutes:@attendance.TimeIn.Seconds</td>
                            <td> @attendance.TimeOut</td>
                            <td><text style="background-color:green; color:white; padding:5px">Present</text></td>
                        }
                    </tr>
                }
            }
        </tbody>
    </table>
</div>
<script type="text/javascript">
    $(document).ready(function () {
        var TimeIn = document.getElementById('InTime').value;
        var TimeOut = document.getElementById('OutTime').value;
        if (TimeIn != '00:00:00') {
            document.getElementById('clockIn').innerHTML = "Clock In </br>" + TimeIn;
            $('#clockIn').attr('disabled', 'disabled');
        }
        if (TimeOut != '00:00:00') {
            document.getElementById('clockOut').innerHTML = "Clock Out </br>" + TimeOut;
        }

        $('#clockIn').click(function () {
            $.ajax({
                type: 'GET',
                url: '/Attendance/AttendanceInOut',
                success: function (data) {
                    var d = new Date();
                    document.getElementById('clockIn').innerHTML = "Clock In </br>" + d.toLocaleTimeString();
                    $('#clockIn').attr('disabled', 'disabled');
                }
            })
        });
        $('#clockOut').click(function () {
            $.ajax({
                type: 'POST',
                url: '/Attendance/AttendanceInOut',
                success: function () {
                    var e = new Date();
                    document.getElementById('clockOut').innerHTML = "Clock Out </br>" + e.toLocaleTimeString();
                }
            });
        });

        var totalDays = 0;
        var currentDate = new Date();
        var m = ((currentDate.getMonth() + 1) >= 10) ? (currentDate.getMonth() + 1) : '0' + (currentDate.getMonth() + 1);
        var y = new Date().getFullYear();
        $('#inputmonth').val(m + '/' + y);
        generateReport(m + '/' + y, 'month');

        $('#select').on('change', function () {
            var v = $('#select').val();
            if (v == 'year') {
                $('#inputyeardiv').show();
                $('#inputmonthdiv').hide();
                $('#inputweekdiv').hide();
                $('#inputyear').datetimepicker({
                    format: "YYYY"
                });
            }
            else if (v == 'month') {
                $('#inputmonthdiv').show();
                $('#inputyeardiv').hide();
                $('#inputweekdiv').hide();
                $('#inputmonth').datetimepicker({
                    format: "MM/YYYY"
                });
            }
            else if (v == 'week') {
                $('#inputmonthdiv').hide();
                $('#inputyeardiv').hide();
                $('#inputweekdiv').show();
                $("#inputweek").datetimepicker({
                    format: 'DD/MM/YYYY'
                });
            }
        });
        $('#inputweek').on('dp.change', function (e) {
            var value = $("#inputweek").val();
            var firstDate = moment(value, "DD/MM/YYYY").day(0).format("DD/MM/YYYY");
            var lastDate = moment(value, "DD/MM/YYYY").day(6).format("DD/MM/YYYY");
            $("#inputweek").val(firstDate + " - " + lastDate);
        });
        $('#generateReport').on('click', function () {
            var v = $('#select').val();
            if (v == 'year') {
                var value = $("#inputyear").val();
                $("#inputyear").val(value);
                if (value % 4 == 0) {
                    totalDays = 366;
                }
                else {
                    totalDays = 365;
                }
                generateReport(value, 'year');
            }

            else if (v == 'month') {
                var value = $("#inputmonth").val();
                $("#inputmonth").val(value);
                var monthYear = value.split('/');
                var y = monthYear[1];
                var m = monthYear[0];
                totalDays = new Date(y, m, 0).getDate()
                generateReport(value, 'month');
            }
            else if (v == 'week') {
                var value = $("#inputweek").val();
                var firstDate = moment(value, "DD/MM/YYYY").day(0).format("DD/MM/YYYY");
                var lastDate = moment(value, "DD/MM/YYYY").day(6).format("DD/MM/YYYY");
                $("#inputweek").val(firstDate + " - " + lastDate);
                generateReport(firstDate + " - " + lastDate, 'week');
                totalDays = 7;
            }
        });

        function generateReport(value, type) {
            var dTable = $('#example').DataTable({
                destroy: true,
                "processing": true, // for show progress bar
                "serverSide": true, // for process server side
                "filter": true, // this is for disable filter (search box)
                buttons: [
                    {
                        extend: 'pdfHtml5',
                        title: 'Employee Report',
                        text: 'Export',
                        titleAttr: 'Export to Pdf',
                        orientation: 'landscape',
                        pageSize: 'LEGAL'
                    }
                ],
                'columnDefs': [
                    {
                        'searchable': false,
                        'targets': [0, 1, 2]
                    }
                ],
                "aoColumns": [
                    { "sType": "date" },
                    { "sType": "time" },
                    null,
                    null
                ],
                "aoColumnDefs": [
                    { "aTargets": [0], "bSortable": true },
                    { "aTargets": ['_all'], "bSortable": false }
                ],
                sDom: '<"myexport"B>ifrtlp',
                lengthMenu: [
                    [5, 10, 25, -1],
                    ['5', '10', '25', 'All']
                ],
                ajax: {
                    "url": "/Attendance/EmployeeReports",
                    "type": "POST",
                    "datatype": "json",
                    "data": { "date": value, "type": type },
                },
                "columns": [
                    {
                        "data": null, "name": "TenantId", "autoWidth": true, render: function (row) {
                            var a = 10;
                            return a;
                        }
                    },
                    {
                        "data": "Attendance", "name": "Attendance", "autoWidth": true, render: function (data) {
                            var a = 10;
                            return a;
                        }
                    },
                    {
                        "data": "Attendance", "name": "Attendance", "autoWidth": true, render: function (data) {
                            var a = 10;
                            return a;
                        }
                    },
                    {
                        data: null, "autoWidth": true, render: function () {
                            var a = 10;
                            return a;
                        }
                    }
                ],
                "initComplete": function () {
                    var $searchInput = $('div.dataTables_filter input');
                    $searchInput.unbind();
                    $searchInput.bind('keyup', function (e) {
                        if (this.value.length >= 3 || this.value.length == 0) {
                            dTable.search(this.value).draw();
                        }
                    });
                }
            });
        }
    });
</script>







