@model IEnumerable<EIS.Entities.Employee.Attendance>
@{
    int absentDays = 0;
    int totalDays = 0;
    int year = 0;
    int month = 0;
    string displayTimeIn = "";
    string displayTimeOut = "-";
    string hours = "-";
    DateTime startDate = new DateTime();


    if (ViewBag.year != null)
    {
        year = ViewBag.year;
    }

    if (ViewBag.startDate!= null)
    {
        startDate = ViewBag.startDate;
    }
    if (ViewBag.month != null)
    {
        month = ViewBag.month;
    }
    DateTime targetDate = new DateTime();
    DateTime endDate = new DateTime();

    if (ViewBag.type == "year")
    {

        targetDate = new DateTime(year, 1, 1);
        endDate = targetDate.AddYears(1);
        if (DateTime.IsLeapYear(year))
        { totalDays = 366; }
        else
        { totalDays = 365; }

    }
    else if(ViewBag.type == "month")
    {
        targetDate = new DateTime(year, month, 1);
        endDate = targetDate.AddMonths(1);
        totalDays = DateTime.DaysInMonth(year, month);

    }
    else if (ViewBag.type == "week")
    {
        targetDate = startDate;
        endDate = targetDate.AddDays(7);
        totalDays = 7;
    }

    if(Model.Count()==0)
    {
        displayTimeIn = "0";
        displayTimeOut = "0";
        hours = "0";
        absentDays = 0;
    }
    else
    {
        absentDays = totalDays - Model.Count();
        TimeSpan averageTimeIn = new TimeSpan(Convert.ToInt64(Model.Average(x => x.TimeIn.Ticks)));
        DateTime timeIn = DateTime.Today.Add(averageTimeIn);
        displayTimeIn = timeIn.ToString("hh:mm tt");

        TimeSpan averageTimeOut = new TimeSpan(Convert.ToInt64(Model.Average(x => x.TimeOut.Ticks)));
        DateTime timeOut = DateTime.Today.Add(averageTimeOut);
        displayTimeOut = timeOut.ToString("hh:mm tt");

        DateTime averageHours = DateTime.Today.Add(averageTimeOut - averageTimeIn);
        string displayAverageHours = timeOut.ToString("hh:mm");

        hours = Math.Round(timeOut.Subtract(timeIn).TotalHours, 2).ToString();
    }


}

<style type="text/css">

    td {
        width: 200px;
        text-align: center
    }

    th {
        font-size: medium;
        text-align: center
    }

    div .panel-primary {
        text-align: center
    }
</style>


<div class="container-fluid">
    <div class="row">
        <div class="col-md-2 col-sm-2">
            <div class="panel panel-primary">
                <div class="panel-heading">Average Hrs</div>
                <div class="panel-body">@hours<span>Hrs</span></div>
            </div>
        </div>
        <div class="col-md-2 col-sm-2">
            <div class="panel panel-primary">
                <div class="panel-heading">Average TImeIn</div>
                <div class="panel-body">@displayTimeIn</div>
            </div>
        </div>
        <div class="col-md-2 col-sm-2">
            <div class="panel panel-primary">
                <div class="panel-heading">Average TImeOut</div>
                <div class="panel-body">@displayTimeOut</div>
            </div>
        </div>
        <div class="col-md-2 col-sm-2">
            <div class="panel panel-primary">
                <div class="panel-heading">Present Days</div>
                <div class="panel-body">@Model.Count()</div>
            </div>
        </div>
        <div class="col-md-2 col-sm-2">
            <div class="panel panel-primary">
                <div class="panel-heading">Absent Days</div>
                <div class="panel-body">@absentDays</div>
            </div>
        </div>
        <div class="col-md-2 col-sm-2">
            <div class="panel panel-primary">
                <div class="panel-heading">Total Days</div>
                <div class="panel-body">@totalDays</div>
            </div>
        </div>
    </div>
</div>
<div class="table-responsive">
    <table id="example" class="table table-responsive table-striped table-hover">
        <thead>
            <tr>
                <th>Date</th>
                <th>TimeIn</th>
                <th>Time Out</th>
                <th>Status</th>

            </tr>
        </thead>
        <tbody>
            @{
                @for (DateTime date = targetDate; date < endDate; date = date.AddDays(1))
                {
            <tr>
                <td>
                    @date.ToShortDateString()
                </td>

                @{
                    var attendance = Model.Where(x => x.DateIn == date).Select(x => new { x.TimeIn, x.TimeOut }).FirstOrDefault();
                }

                @if (attendance == null || attendance.TimeIn == attendance.TimeOut)
                {

                    @if (date < DateTime.Now.Date)
                    {
                        <td><text>Nil</text></td>
                        <td><text>Nil</text></td>
                        <td><text style="background-color:red; color:white; padding:5px">Absent</text></td>
                    }
                    else
                    {
                        <td><text>-</text></td>
                        <td><text>-</text></td>
                        <td><text>-</text></td>
                    }

                }

                else
                {
         
                    <td> @attendance.TimeIn.Hours:@attendance.TimeIn.Minutes:@attendance.TimeIn.Seconds</td>
                    <td> @attendance.TimeOut</td>
                    <td><text style="background-color:green; color:white; padding:5px">Present</text></td>
                }
            </tr>
                 }
            }
        </tbody>
    </table>
</div>
